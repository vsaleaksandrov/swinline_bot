require('dotenv').config({ path: ".env" });
const { MongoClient, ServerApiVersion } = require('mongodb');
const { io } = require("socket.io-client");
const { Bot, InlineKeyboard } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
const express = require('express');

const { BOT_TOKEN, SUMMONER_NAME , SUMMONER_ID , CLIENT_PORT, RIOT_API_KEY, SERVER_PORT, DB_LOGIN, DB_PASS   } = process.env;

let LAST_GAMES = null,
    LAST_GAMES_ACTIVE_INDEX = 0;

const uri = `mongodb+srv://${DB_LOGIN}:${DB_PASS}@cluster0.j9yo8.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`;
let dbClient = null;
run().then(res => dbClient = res).catch(console.dir);

async function run () {
    try {
        const client = new MongoClient(uri, {
            serverApi: {
                version: ServerApiVersion.v1,
                strict: true,
                deprecationErrors: true,
            }
        });

        await client.connect();
        return client;
    } catch (error) {
        console.error(error);
    }
}

const getGameById = async function(gameId) {
    try {
        const responseUser = await fetch(`https://europe.api.riotgames.com/riot/account/v1/accounts/by-riot-id/${SUMMONER_NAME}/${SUMMONER_ID}?api_key=${RIOT_API_KEY}`)
            .then(res => res.json())

        const PUUID = responseUser.puuid;

        if (!PUUID) {
            throw new Error('–û—à–∏–±–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å RIOT_API_KEY.');
        }

        const game = await fetch(
            `https://europe.api.riotgames.com/lol/match/v5/matches/${gameId}?api_key=${RIOT_API_KEY}`
        ).then(res => res.json());

        const playerInfo = game.info.participants.find(player => {
            return player.puuid === PUUID;
        });

        const parsedInfo = {
            championName: playerInfo.championName.toUpperCase(),
            kda: playerInfo.challenges.kda,
            role: playerInfo.lane.toUpperCase(),
            name: playerInfo.riotIdGameName,
            win: playerInfo.win,
            kills: playerInfo.kills,
            deaths: playerInfo.deaths,
            assists: playerInfo.assists,
            minions: playerInfo.totalMinionsKilled + playerInfo.neutralMinionsKilled,
        }

        return `${parsedInfo.win ? "–ü–æ–±–µ–¥–∏–ª" : "–ü—Ä–æ–∏–≥—Ä–∞–ª"} –∑–∞ ${parsedInfo.championName} –Ω–∞ ${parsedInfo.role}. –ö–î–ê - ${parsedInfo.kills}/${parsedInfo.deaths}/${parsedInfo.assists}. –ù–∞—Ñ–∞—Ä–º–∏–ª - ${parsedInfo.minions} –º–æ–±–æ–≤.`
    } catch (error) {
        console.error(error);
    }
}

const updateLastGames = async function() {
    try {
        const responseUser = await fetch(`https://europe.api.riotgames.com/riot/account/v1/accounts/by-riot-id/${SUMMONER_NAME}/${SUMMONER_ID}?api_key=${RIOT_API_KEY}`)
            .then(res => res.json())

        const PUUID = responseUser.puuid;

        if (!PUUID) {
            throw new Error('–û—à–∏–±–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å RIOT_API_KEY.');
        }

        return await fetch(`https://europe.api.riotgames.com/lol/match/v5/matches/by-puuid/${PUUID}/ids?start=0&count=5&api_key=${RIOT_API_KEY}`)
            .then(res => res.json());
    } catch (error) {
        console.log(error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —Ä–∞–±–æ—Ç—è–≥–∏
const bot = new Bot(BOT_TOKEN);
bot.use(hydrate());
bot.start();

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(express.json());
app.listen(CLIENT_PORT);

const socket = io(`http://localhost:${SERVER_PORT}`);

bot.api.setMyCommands([
    {
        command: "start",
        description: "–ë–æ—Ç —Å–∞–º–æ–π —á–µ—Å—Ç–Ω–æ–π –∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä—ã –°–í–ò–ù–õ–ê–ô–ù."
    }
])

const menuKeyboard = new InlineKeyboard()
    .text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫", "balance-stat")
    .text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã", "history-list")
    .row()
    .text("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∏–≥—Ä—É", "set-bet")

const betKeyboard = new InlineKeyboard()
    .text("Win", "bet-win")
    .text("Lost", "bet-lost")
    .row()
    .text("–ù–∞–∑–∞–¥", "back")

const submitKeyboard = new InlineKeyboard()
    .text("–Ø –ø–æ–Ω—è–ª", "okay")

const INTRO_MESSAGE = `
–°–í–ò–ù–õ–ê–ô–ù üê∑ - —Å–∞–º—ã–π —á–µ—Å—Ç–Ω—ã–π –∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π –±—É–∫–º–µ–∫–µ—Ä
\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∏–≥—Ä—ã —Å—Ç—Ä–∏–º–µ—Ä–∞ General_HS_ –ø–æ League of Legends
\n–°—Ç–∞–≤–∫–∏ –¥–µ–ª–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É - —Å–≤–∏–Ω–±–µ—Ç—ã. –ù–∏–∫–∞–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.
\n–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –∫–∞–∫ —Ç–æ–ª—å–∫–æ General_HS_ –Ω–∞—á–Ω—ë—Ç –∏–≥—Ä—É. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è - –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞–≤–∫—É –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç –≤—ã–∏–≥—Ä—ã—à.
`

let IS_PLAYING_RIGHT_NOW = false;
let IS_READY_TO_BET = false;

bot.command("start", async (ctx) => {
    socket.on('currentGame', async function (currentGame) {
        if (currentGame) {
            IS_PLAYING_RIGHT_NOW = true;

            IS_READY_TO_BET = currentGame.gameLength < 50;
            return;
        }

        IS_PLAYING_RIGHT_NOW = false;
    });

    await ctx.reply(INTRO_MESSAGE, {
        reply_markup: submitKeyboard,
    })
});

bot.callbackQuery("win", async (ctx) => {
    const userId = ctx.update.callback_query.from.id;

    await ctx.callbackQuery.message.editText(`
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ WIN –ø—Ä–∏–Ω—è—Ç–∞. 
\n–ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –æ–∫–∞–∂–µ—Ç—Å—è –≤–µ—Ä–Ω–∞ - –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 1000 —Å–≤–∏–Ω–±–µ—Ç–æ–≤.
`, {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("lost", async (ctx) => {
    const userId = ctx.update.callback_query.from.id;

    await ctx.callbackQuery.message.editText(`
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ LOST –ø—Ä–∏–Ω—è—Ç–∞.
\n–ï—Å–ª–∏ General_HS_ –ø–æ–±–µ–¥–∏—Ç - –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 1000 —Å–≤–∏–Ω–±–µ—Ç–æ–≤.
`, {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("back", async (ctx) => {
    await ctx.callbackQuery.message.editText(INTRO_MESSAGE, {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("set-bet", async (ctx) => {
    if (IS_PLAYING_RIGHT_NOW && IS_READY_TO_BET) {
        await ctx.callbackQuery.message.editText(`–°—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã__`, { reply_markup: new InlineKeyboard()
                .text("–ù–∞–∑–∞–¥", "back")
        });
    }

    if (IS_PLAYING_RIGHT_NOW && !IS_READY_TO_BET) {
        await ctx.callbackQuery.message.editText(`–û–∫–Ω–æ —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã.`, { reply_markup: new InlineKeyboard()
                .text("–ù–∞–∑–∞–¥", "back")
        });
    }

    if (!IS_PLAYING_RIGHT_NOW) {
        await ctx.callbackQuery.message.editText(`–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç General_HS_ –Ω–µ –∏–≥—Ä–∞–µ—Ç.`, { reply_markup: new InlineKeyboard()
                .text("–ù–∞–∑–∞–¥", "back")
        });
    }
})


bot.callbackQuery("okay", async (ctx) => {
    await ctx.callbackQuery.message.editText(INTRO_MESSAGE, {
        reply_markup: menuKeyboard,
    })
}) 

bot.callbackQuery("balance-stat", async (ctx) => {
    const KEGLYA_DB = dbClient.db("keglya_db");
    const USERS_COLLECTION = KEGLYA_DB.collection("users");

    const userId = ctx.update.callback_query.from.id;
    let uniqueUser = await USERS_COLLECTION.findOne({ name: userId });

    if (!uniqueUser?.name) {
        uniqueUser = {
            name: userId,
            balance: 150000,
            successBets: 0,
            totalBets: 0,
            activeBets: [],
        }

        await USERS_COLLECTION.insertOne(uniqueUser)
    }

    const { balance, successBets, totalBets } = uniqueUser;

    await ctx.callbackQuery.message.editText(`
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–°–≤–∏–Ω–±–µ—Ç–æ–≤ –Ω–∞ —Å—á–µ—Ç—É: ${balance}
–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${successBets}
–°—Ç–∞–≤–æ–∫ –≤—Å–µ–≥–æ: ${totalBets}
`, { reply_markup: new InlineKeyboard()
            .text("–ù–∞–∑–∞–¥", "back")
    });
    await ctx.answerCallbackQuery()
})


const statsKeyboard = new InlineKeyboard()
    .text("<", "prev-game")
    .text(">", "next-game")
    .row()
    .text("–ù–∞–∑–∞–¥", "back")

bot.callbackQuery("history-list", async (ctx) => {
    LAST_GAMES = await updateLastGames();

    const gameInfo = await getGameById(LAST_GAMES[LAST_GAMES_ACTIVE_INDEX])
    await ctx.callbackQuery.message.editText(`${gameInfo}`, { reply_markup: new InlineKeyboard()
            .text("<", "prev-game")
            .row()
            .text("–ù–∞–∑–∞–¥", "back") });
    await ctx.answerCallbackQuery()
})

bot.callbackQuery("prev-game", async (ctx) => {
    if (LAST_GAMES_ACTIVE_INDEX >= 4) return;

    LAST_GAMES_ACTIVE_INDEX++;

    const gameInfo = await getGameById(LAST_GAMES[LAST_GAMES_ACTIVE_INDEX])
    await ctx.callbackQuery.message.editText(`${gameInfo}`, {
        reply_markup: LAST_GAMES_ACTIVE_INDEX > 3 ? new InlineKeyboard()
        .text(">", "next-game")
        .row()
        .text("–ù–∞–∑–∞–¥", "back")
    : statsKeyboard });
    await ctx.answerCallbackQuery()
})

bot.callbackQuery("next-game", async (ctx) => {
    if (LAST_GAMES_ACTIVE_INDEX <= 0) return;

    LAST_GAMES_ACTIVE_INDEX--;

    const gameInfo = await getGameById(LAST_GAMES[LAST_GAMES_ACTIVE_INDEX])
    await ctx.callbackQuery.message.editText(`${gameInfo}`, {
        reply_markup: LAST_GAMES_ACTIVE_INDEX < 1 ? new InlineKeyboard()
                .text("<", "prev-game")
                .row()
                .text("–ù–∞–∑–∞–¥", "back")
            : statsKeyboard });
    await ctx.answerCallbackQuery()
})