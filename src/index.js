require('dotenv').config();
const { Bot, InlineKeyboard, webhookCallback } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
const express = require('express');
const JSONdb = require('simple-json-db');
const db = new JSONdb('./src/db.json');

const INITIAL_STAT = {
    bets: 10000,
    successBetCount: 0,
    totalBets: 0,
    activeBet: null
}

const { BOT_TOKEN, SUMMONER_NAME , SUMMONER_ID , PORT, DOMAIN, RIOT_API_KEY   } = process.env;

const bot = new Bot(BOT_TOKEN);

bot.use(hydrate());

const getLastGameInfo = async () => {
    const responseUser = await fetch(`https://europe.api.riotgames.com/riot/account/v1/accounts/by-riot-id/${SUMMONER_NAME}/${SUMMONER_ID}?api_key=${RIOT_API_KEY}`)
        .then(res => res.json())

    const PUUID = responseUser.puuid;
    const lastGames = await fetch(`https://europe.api.riotgames.com/lol/match/v5/matches/by-puuid/${PUUID}/ids?start=0&count=5&api_key=${RIOT_API_KEY}`)
        .then(res => res.json())

    const lastGameStats = await fetch(`https://europe.api.riotgames.com/lol/match/v5/matches/${lastGames[0]}?api_key=${RIOT_API_KEY}`).then(res => res.json());

    const playerStat = lastGameStats.info.participants.find(player => {
        return player.puuid === PUUID
    });

    return {
        championName: playerStat.championName,
        kda: playerStat.challenges.kda,
        role: playerStat.lane,
        name: playerStat.riotIdGameName,
        win: playerStat.win,
        kills: playerStat.kills,
        deaths: playerStat.deaths,
        assists: playerStat.assists,
        minions: playerStat.totalMinionsKilled + playerStat.neutralMinionsKilled,
    };
}

bot.api.setMyCommands([
    {
        command: "start",
        description: "–ë–æ—Ç —Å–∞–º–æ–π —á–µ—Å—Ç–Ω–æ–π –∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä—ã –°–í–ò–ù–õ–ê–ô–ù."
    }
])

const menuKeyboard = new InlineKeyboard()
    .text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫", "balance-stat")
    .text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä", "history-list")
    .row()
    .text("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∏–≥—Ä—É", "set-bet")

const betKeyboard = new InlineKeyboard()
    .text("Win", "bet-win")
    .text("Lost", "bet-lost")
    .row()
    .text("–ù–∞–∑–∞–¥", "back")

const submitKeyboard = new InlineKeyboard()
    .text("–Ø –ø–æ–Ω—è–ª", "okay")

const INTRO_MESSAGE = `
–°–í–ò–ù–õ–ê–ô–ù üê∑ - —Å–∞–º—ã–π —á–µ—Å—Ç–Ω—ã–π –∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π –±—É–∫–º–µ–∫–µ—Ä
\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∏–≥—Ä—ã —Å—Ç—Ä–∏–º–µ—Ä–∞ General_HS_ –ø–æ League of Legends
\n–°—Ç–∞–≤–∫–∏ –¥–µ–ª–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É - —Å–≤–∏–Ω–±–µ—Ç—ã. –ù–∏–∫–∞–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.
\n–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –∫–∞–∫ —Ç–æ–ª—å–∫–æ General_HS_ –Ω–∞—á–Ω—ë—Ç –∏–≥—Ä—É. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è - –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞–≤–∫—É –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç –≤—ã–∏–≥—Ä—ã—à.
`

let IS_PLAYING_RIGHT_NOW = false;
let SECONDS_LEFT = 0;

bot.command("start", async (ctx) => {
    await ctx.reply(INTRO_MESSAGE, {
        reply_markup: submitKeyboard,
    })
});

bot.callbackQuery("win", async (ctx) => {
    const userId = ctx.update.callback_query.from.id;
    const users = await db.get("USERS");

    let user = users.find(user => user.id === userId);

    user = {
        ...INITIAL_STAT,
        activeBet: {
            status: "WIN",
        }
    }

    await db.set("USERS", [...users, user]);

    await ctx.callbackQuery.message.editText(`
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ WIN –ø—Ä–∏–Ω—è—Ç–∞. 
\n–ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –æ–∫–∞–∂–µ—Ç—Å—è –≤–µ—Ä–Ω–∞ - –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 1000 —Å–≤–∏–Ω–±–µ—Ç–æ–≤.
`, {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("lost", async (ctx) => {
    const userId = ctx.update.callback_query.from.id;
    const users = await db.get("USERS");

    let user = users.find(user => user.id === userId);

    user = {
        ...INITIAL_STAT,
        activeBet: "LOST"
    }

    await db.set("USERS", [...users, user]);

    await ctx.callbackQuery.message.editText(`
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ LOST –ø—Ä–∏–Ω—è—Ç–∞.
\n–ï—Å–ª–∏ General_HS_ –ø–æ–±–µ–¥–∏—Ç - –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 1000 —Å–≤–∏–Ω–±–µ—Ç–æ–≤.
`, {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("back", async (ctx) => {
    await ctx.callbackQuery.message.editText(INTRO_MESSAGE, {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("set-bet", async (ctx) => {
    if (!IS_PLAYING_RIGHT_NOW) {
        await ctx.callbackQuery.message.editText(`–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`, { reply_markup: menuKeyboard });
        return;
    }

    if (!SECONDS_LEFT) {
        await ctx.callbackQuery.message.editText(`–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í—Ä–µ–º—è —Å—Ç–∞–≤–æ–∫ –ø—Ä–æ—à–ª–æ.`, { reply_markup: menuKeyboard });
        return;
    }

    await ctx.callbackQuery.message.editText(`–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É. –î–æ –∫–æ–Ω—Ü–∞ –ø—Ä–∏—ë–º–∞ —Å—Ç–∞–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å ${SECONDS_LEFT} —Å–µ–∫—É–Ω–¥`, { reply_markup: betKeyboard });
})


bot.callbackQuery("okay", async (ctx) => {
    await ctx.callbackQuery.message.editText(INTRO_MESSAGE, {
        reply_markup: menuKeyboard,
    })

    setInterval(async () => {
        try {
            const CURRENT_GAME = await getCurrentGame();

            if (!CURRENT_GAME.id) {
                await ctx.callbackQuery.message.editText(INTRO_MESSAGE, {
                    reply_markup: menuKeyboard,
                })

                IS_PLAYING_RIGHT_NOW = false;

                const userId = ctx.update.callback_query.from.id;
                const users = await db.get("USERS");

                let user = users.find(user => user.id === userId);

                if (user.activeBet) {
                    user = {
                        ...INITIAL_STAT,
                        id: userId,
                    }

                    await db.set("USERS", [...users, user]);
                }

                return;
            }

            const minutes = Math.floor(CURRENT_GAME.gameLength / 60)
            await ctx.callbackQuery.message.editText(`
–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç General_HS_ –∫–µ—Ä—Ä–∏—Ç –∫–∞—Ç–∫—É.
\n–ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è ${minutes} –º–∏–Ω—É—Ç`, {
                reply_markup: menuKeyboard,
            })

            if (CURRENT_GAME.gameLength < 1000) {
                SECONDS_LEFT = 1000 - CURRENT_GAME.gameLength;
            } else {
                SECONDS_LEFT = 0;
            }

            IS_PLAYING_RIGHT_NOW = true;
        } catch (e) {
            console.log(e)
        }
    }, 10000);
})

bot.callbackQuery("balance-stat", async (ctx) => {
    const userId = ctx.update.callback_query.from.id;
    const users = await db.get("USERS");

    let user = users.find(user => user.id === userId);

    if (!user) {
        user = {
            ...INITIAL_STAT,
            id: userId,
        }

        await db.set("USERS", [...users, user]);
    }

    const { bets, successBetCount, totalBets } = user;

    await ctx.callbackQuery.message.editText(`
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–°–≤–∏–Ω–±–µ—Ç–æ–≤ –Ω–∞ —Å—á–µ—Ç—É: ${bets}
–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${successBetCount}
–°—Ç–∞–≤–æ–∫ –≤—Å–µ–≥–æ: ${totalBets}
`, { reply_markup: menuKeyboard });
    await ctx.answerCallbackQuery()
})

bot.callbackQuery("history-list", async (ctx) => {
    const { name, championName, kda, win, kills, deaths, assists, minions, role } = await getLastGameInfo();
    await ctx.callbackQuery.message.editText(
        `–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: ${name}
–ß–µ–º–ø–∏–æ–Ω: ${championName}
–ò–≥—Ä–∞–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${role}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${win ? "–ü–æ–±–µ–¥–∞ ‚úÖ" : "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ‚ùå"}
–£–±–∏–π—Å—Ç–≤: ${kills}, –°–º–µ—Ä—Ç–µ–π: ${deaths}, –ê—Å—Å–∏—Å—Ç–æ–≤: ${assists}
–ò—Ç–æ–≥–æ–≤—ã–π –ö–î–ê: ${kda}
–§–∞—Ä–º: ${minions}`, { reply_markup: menuKeyboard });
    await ctx.answerCallbackQuery()
})

const app = express();
app.use(express.json());

const port = PORT || 3002;
app.listen(port);

bot.start();

const getCurrentGame = async function(){
    const responseUser = await fetch(`https://europe.api.riotgames.com/riot/account/v1/accounts/by-riot-id/${SUMMONER_NAME}/${SUMMONER_ID}?api_key=${RIOT_API_KEY}`)
        .then(res => res.json())

    const PUUID = responseUser.puuid;
    const currentGame = await fetch(`https://euw1.api.riotgames.com/lol/spectator/v5/active-games/by-summoner/${PUUID}?api_key=${RIOT_API_KEY}`)
        .then(res => res.json())

    return {
        id: currentGame.gameId,
        gameLength: currentGame.gameLength, // —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –∏–≥—Ä–∞
    };
}